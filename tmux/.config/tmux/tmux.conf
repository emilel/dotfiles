# general

## send pane title to terminal
set -g set-titles on
set -g set-titles-string '#{client_session}: #{window_name}'

## reload configuration file
bind-key -n M-R run-shell "tmux source-file ~/.config/tmux/tmux.conf \
    && tmux display-message 'Reloaded configuration file' \
    || tmux display-message 'There was an error reloading the configuration file'"

## no delay for escape
set -sg escape-time 0

## use mouse
set -g mouse on

## make focus work with vim
set-option -g focus-events on

## enter command
bind-key -n M-: command-prompt

## scrollback buffer size
set-option -g history-limit 10000

## colors
set -g default-terminal "tmux-256color"

## show messages for two seconds
set -g display-time 2000

## update status regularly
set -g status-interval 1

# bell

## don't enable bell if it's in current window
set -g bell-action other

## clear bell after 3 seconds
set-hook -g alert-bell {
    run -b -d5 -C {
        kill-session -C
    }
}

# copy mode
## enable

bind-key -n M-/ copy-mode
set -g mode-keys vi

## colors
set -g mode-style 'bg=yellow,fg=black'

## begin selection
bind-key -T copy-mode-vi v send-keys -X begin-selection

## yank
bind-key -T copy-mode-vi y send-keys -X copy-selection-no-clear \; \
    display-message "Copied selected content"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-key -X copy-selection-no-clear \; \
    display-message "Copied selected content"

## paste
bind-key p paste-buffer

# process

## detach
bind-key -n M-d detach

# panes

## pane movement
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

## pane creation
bind-key -n M-v split-window -h -c "#{pane_current_path}"
bind-key -n M-b split-window -v -c "#{pane_current_path}"

## go to window
bind -n M-0 new-window  -n shell
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

## mark pane
bind -n M-| select-pane -m

## go to marked or previous pane
bind-key -n M-\\ if-shell "[[ #{?pane_marked,1,0} -eq 1 ]]" "last-window" "switch-client -t '{marked}'"

## rotate panes
bind -n M-o rotate-window

## toggle vertical/horizontal layout
bind -n M-O next-layout

## move panes
bind -n M-H swap-pane -U
bind -n M-L swap-pane -D
bind -n M-K swap-pane -U
bind -n M-J swap-pane -D

## move pane to window
bind -n M-! join-pane -t 1
bind -n M-@ join-pane -t 2
bind -n M-# join-pane -t 3
bind -n M-$ join-pane -t 4
bind -n M-% join-pane -t 5
bind -n M-^ join-pane -t 6
bind -n M-& join-pane -t 7
bind -n M-* join-pane -t 8
bind -n M-( join-pane -t 9
bind -n M-) join-pane -t 10

## extract pane to its own window
bind -n M-X break-pane

## make pane full screen
bind -n M-f resize-pane -Z

## clear pane
bind -n M-\; clear-history

# windows

## don't rename automatically
set-option -g allow-rename off

## start at 1
set-option -g base-index 1

## renumber window when moving/closing
set -g renumber-windows on

## rename window
bind -n M-m command-prompt "rename-window '%%'"

## create new window
bind-key -n M-n new-window -a -n shell -c "#{pane_current_path}"

## close window
bind-key -n M-q kill-pane

## window movement
bind-key -n M-C-h select-window -p
bind-key -n M-C-l select-window -n

## previous window
bind-key -n M-p last-window

## move windows
bind-key -n M-H swap-window -t - \; previous-window
bind-key -n M-L swap-window -t + \; next-window

# sessions

## rename session
bind-key -n M-M command-prompt "rename-session '%%'"

## close session
bind-key -n M-Q kill-session

## close session and go to other
bind-key -n M-D confirm-before -p "Kill #S (y/n)?" "run-shell 'tmux switch-client -n \\\; kill-session -t \"#S\"'"

## choose session
bind-key -n M-t choose-tree -G

## create session
bind-key -n M-N new-session

## previous/next session
bind-key -n M-< switch-client -p
bind-key -n M-> switch-client -n

## previous session

bind-key -n M-p switch-client -l

## switch to session
bind-key -n M-a display-popup -E "tmux list-sessions | sed -E 's/:.*\$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | $HOME/.install/fzf/bin/fzf --reverse | xargs tmux switch-client -t"

## go to notes
bind -n M-i run-shell "tmux has-session -t notes 2>/dev/null && tmux switch-client -t notes || tmux new-session -d -s notes '$HOME/.scripts/notes.zsh' && tmux switch-client -t notes"

## go to conf
bind -n M-u run-shell "tmux has-session -t conf 2>/dev/null && tmux switch-client -t conf || tmux new-session -d -s conf '$HOME/.scripts/configure.sh' && tmux switch-client -t conf"

# theme

BG="colour236"
FG="colour229"

set -g status-bg $BG

SESSION_FG="colour237,bold"
SESSION_BG="colour172"

ACTIVE_FG="colour223,bold"
ACTIVE_AND_MARKED_BG="colour67"
ACTIVE_BG="colour66"

INACTIVE_FG="colour223"
INACTIVE_BG="colour239"

FOLDER_FG="colour223"
FOLDER_BG="colour132"

HOST_FG="colour237,bold"
HOST_BG="colour142"

CLOCK_FG="colour223"
CLOCK_BG="colour66"

TMUX_FG="colour237,bold"
TMUX_BG="colour166"

BELL_FG="colour223"
BELL_BG="colour167"

MARKED_FG="colour237,bold"
MARKED_BG="colour243"

set -g status-left-length 100
set-option -g status-left "\
#[bg=$SESSION_BG,fg=$SESSION_FG,#{?#{>:#{session_group_size},1},,no}italics]\
  #{session_name}  \
"

set -g status-right-length 100
set-option -g status-right "\
#[bg=$FOLDER_BG,fg=$FOLDER_FG]  #(basename #{pane_current_path})\
  #[bg=$HOST_BG,fg=$HOST_FG]  #{user}@#{host}  \
#[bg=$TMUX_BG,fg=$TMUX_FG]  #(tmux list-sessions | wc -l)  \
"
#[bg=$CLOCK_BG,fg=$CLOCK_FG,nobold]  %Y-%m-%d %H:%M  

set-window-option -g window-status-separator ''
set -g status-interval 1

set-window-option -g window-status-current-format "\
#[bg=#{?pane_marked,$ACTIVE_AND_MARKED_BG,$ACTIVE_BG},fg=$ACTIVE_FG]\
  #{window_index}\
#{?#{!=:#{pane_in_mode},0},[,#{?#{!=:#{window_zoomed_flag},0},(, }}\
#{window_name}\
#{?#{!=:#{pane_current_command},zsh},., }
#{?#{!=:#{pane_in_mode},0},],#{?#{!=:#{window_zoomed_flag},0},), }}\
"

set-window-option -g window-status-format "\
#[bg=#{?window_marked_flag,$MARKED_BG,$INACTIVE_BG},fg=$INACTIVE_FG]\
 #{?#{window_last_flag},-, }\
#{window_index}\
#{?#{!=:#{pane_in_mode},0},[,#{?#{!=:#{window_zoomed_flag},0},(, }}\
#{window_name}\
#{?window_bell_flag,!,#{?#{!=:#{pane_current_command},zsh},., }}\
#{pane_command}\
#{?#{!=:#{pane_in_mode},0},],#{?#{!=:#{window_zoomed_flag},0},), }}\
"
