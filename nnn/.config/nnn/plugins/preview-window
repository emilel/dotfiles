#!/usr/bin/env sh

set -e

NNN_TEXT_PREVIEW=$(echo "${NNN_TEXT_PREVIEW:-application/x-pie-executable}" | tr ';' '\n')
TERMINAL=foot
NNN_PREVIEW_LOG="${NNN_PREVIEW_LOG:-/dev/null}"

view_fifo="$NNN_FIFO.view"
pid=-1
term_open=0
last_application=""
max_lines_file="$NNN_FIFO.max_lines"

main() {
    kill_if_started_again
    run_in_background

    touch $NNN_PREVIEW_LOG
    [ ! -e "$view_fifo" ] && mkfifo "$view_fifo"
    trap remove_fifo EXIT
    trap kill_previewer EXIT

    while read -r selection; do
        write_log $selection
        mimetype=$(file --mime-type -b "$selection")
        if echo "$selection" | grep "/$" 2>&1 >/dev/null; then
            write_log "no current selection"
            assure_terminal_open
            command="printf ''"
            echo $command >$view_fifo
            continue
        elif [ -d "$selection" ]; then
            write_log "previewing a directory"
            assure_terminal_open
            command=$(get_directory_preview_command $selection)
            echo $command >$view_fifo
            continue
        elif preview_with_text $mimetype; then
            write_log "previewing $mimetype as text"
            assure_terminal_open
            command=$(get_text_preview_command $selection)
            echo $command >$view_fifo
            continue
        elif echo $mimetype | grep "^text/"; then
            write_log "previewing $mimetype with bat"
            assure_terminal_open
            command="bat --color=always --style=changes $selection"
            echo $command >$view_fifo
            continue
        fi

        application=$(xdg-mime query default $mimetype)
        if [[ -z $application ]]; then
            write_log "previewing unknown $mimetype as text"
            assure_terminal_open
            command=$(get_text_preview_command $selection)
            echo $command >$view_fifo
            continue
        fi

        open_file="$NNN_FIFO.$application.file"
        cat $selection >$open_file
        if [[ "$application" != "$last_application" ]]; then
            command=$(get_application_command $mimetype $application)
            write_log $command
            focused_container=$(swaymsg -t get_tree | jq 'recurse(.nodes[]) | select(.focused==true).id')
            kill_previewer
            eval "$command &"
            refocus_explorer $focused_container
            last_application=$application
            pid=$!
            write_log "starting new application $command: $pid"
        else
            write_log "reusing old window"
        fi
        continue
    done <"$NNN_FIFO"
}

kill_if_started_again() {
    if [ "$(pgrep -f "$0" | wc -l)" -gt 3 ]; then
        write_log killing previewer and child processes
        for child_pid in $(pgrep -f "$0"); do
            # if [ "$child_pid" -ne "$$" ]; then
            kill $child_pid 2>&1 >/dev/null
            # fi
        done
        exit 0
    fi
}

run_in_background() {
    if [ -z "$BACKGROUND" ]; then
        write_log starting previewer in background and exiting
        BACKGROUND=1 eval $0 "$@" 2>&1 >>$NNN_PREVIEW_LOG &
        exit 0
    else
        write_log running previewer
    fi
}

kill_previewer() {
    if [[ $pid -ne -1 ]]; then
        write_log "killing $pid's child processes"
        for child_pid in $(pgrep -P $pid); do
            write_log killing $child_pid
            kill $child_pid 2>&1 >/dev/null
        done
        if ps -p $pid >/dev/null; then
            echo killing $pid
            kill $pid 2>&1 >/dev/null
        fi
        term_open=0
    fi
}

remove_fifo() {
    rm -f $NNN_FIFO*
}

preview_with_text() {
    mimetype=$1
    echo "${NNN_TEXT_PREVIEW}" | grep -qx "$mimetype"
    return $?
}

get_text_preview_command() {
    file=$@
    echo "file --mime-type '$file'; eza --long --group --git '$file'"
}

get_directory_preview_command() {
    directory=$1
    max_lines=$(cat $max_lines_file)
    depth=1
    last_good_depth=1

    prev_line_count=0
    while :; do
        line_count=$(eza --level=$depth --tree --color=never "$directory" | wc -l)

        if [ $line_count -ge $max_lines ] || [ $line_count -eq $prev_line_count ]; then
            break
        fi
        last_good_depth=$depth
        prev_line_count=$line_count
        depth=$((depth + 1))
    done

    depth=$last_good_depth
    last_good_depth_with_hidden=$last_good_depth
    prev_line_count=0
    while :; do
        line_count=$(eza --level=$depth --all --tree --color=never "$directory" | wc -l)

        if [ $line_count -ge $max_lines ] || [ $line_count -eq $prev_line_count ]; then
            break
        fi
        last_good_depth_with_hidden=$depth
        prev_line_count=$line_count
        depth=$((depth + 1))
    done

    if [ $last_good_depth_with_hidden -gt $last_good_depth ]; then
        echo "eza --level=$last_good_depth_with_hidden --long --no-time --git --no-permissions --no-user --all --tree --color=always \"$directory\""
    else
        echo "eza --level=$last_good_depth --long --no-time --git --no-permissions --no-user --tree --color=always \"$directory\""
    fi
}

assure_terminal_open() {
    if [ "$term_open" != "1" ]; then
        kill_previewer
        open_terminal
    else
        write_log "using terminal $pid"
    fi
}

open_terminal() {
    focused_container=$(swaymsg -t get_tree | jq 'recurse(.nodes[]) | select(.focused==true).id')
    $TERMINAL sh -c "$HOME/.config/nnn/plugins/view" 2>&1 >>$NNN_PREVIEW_LOG &
    term_open=1
    last_application="terminal"
    pid=$!
    write_log "opening terminal $pid"
    refocus_explorer $focused_container
}

get_application_command() {
    mimetype=$1
    application=$2
    for directory in /usr/share/applications /usr/local/share/applications ~/.local/share/applications; do
        path="$directory/$application"
        if [ -f "$path" ]; then
            write_log "$mimetype, $application: $path"
            break
        fi
    done

    command=$(cat $path | grep -Po 'Exec=\K(.*)' | sed "s#%[fF]#\"$open_file\"#")
    write_log $command
    if grep -q "Terminal=true" "$path"; then
        terminal_command="foot "
    else
        terminal_command=""
    fi

    echo "$terminal_command$command"
}

refocus_explorer() {
    focused_container=$1

    swaymsg -t subscribe '["window"]' |
    while read -r event; do
        event_container_id=$(echo "$event" | jq '.container.id')
        if [ "$event_container_id" -ne "$focused_container" ]; then
            break
        fi
    done
    swaymsg "[con_id=$focused_container]" focus >/dev/null
    sleep 0.5
    swaymsg "[con_id=$focused_container]" focus >/dev/null
}

write_log() {
    message=$@
    echo $message >> $NNN_PREVIEW_LOG
}

main
